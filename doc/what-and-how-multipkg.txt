lsmd 工具集之二：

What is multipkg and how to use it ?

by duanjigang duanjigang1983@gmail.com 2013-11-26 08:10

在上一篇文章中，我们介绍了怎么部署 lsmd 工具集，并通过 multipkg 来发布软件，整体流程是通了，但是关于

怎样使用multipkg 来搭建工程，构建rpm包却没有详细说明，读者看到的只是现成的工程，而没有一个类似于hello world的例子，本篇文章

就是用来帮助读者掌握multipkg的基本使用方法。



我们都知道，rpm 包从生成过程来比较，分为两类：一类是需要源码编译生成二进制文件的格式，另外一种是不需要源码编译（直接压缩源码）

形成的软件包；前者包括 c，java等语言开发的程序，而后者则是一些直接解释，不需要编译成中间代码的语言编写的程序，比如shell,python或者ruby等

语言写的程序。因此，本文，在讲述multipkg的用法时，会介绍到这两种不同生成过程的 rpm 包的构建方法。



(1)  multipkg 的原理。

 multipkg 并没有按照 rpm 的格式去写一个rpm文件（《linux软件管理平台设计与实现》第一章中讲到的协议），因为那样做确实太复杂了，像其他工具一样，

multipkg在制作rpm格式的软件包时，是基于rpmbuild命令来实现的。也就是说，准备好源码，spec文件，然后放到合适的目录中，调用rpmbuild命令，就编译生成

了rpm文件。只不过multipkg把rpmbuild+spec文件这种做包方式用的更优雅些，因为你不需要去关注spec文件，也不需要去关注编译rpm文件的目录，而只需要关注你的源码和编译时hook脚本即可。

multipkg工作的大致原理是：通过 index.yaml 文件来提供SPEC文件中的所有tag,比如name,version,require,config等信息，

然后通过scripts/目录下的post.sh,pre.sh,postun.sh,preun.sh这四个脚本，来存储rpmbuild时在安装前后，卸载前后执行的脚本内容。

最后，root目录提供了rpm的文件列表的一部分（因为scripts的脚本中可能会动态创建文件）。source 或者源码压缩包提供了源码。

这时，构建rpm的因素就足够了。

spec 文件由 index.yaml 文件和scripts 构成。

对于需要编译类的工程，源码压缩包或者source 目录中的文件提供了源码。

对于不需要编译类的工程，root 中的文件直接提供了rpm的文件列表和安装路径。

这样，在编译时，先通过index.yaml和scripts中的文件替换spec文件模板，生成该工程用的spec文件，然后调整源码和spec文件的目录，调用

rpmbuild命令，作用于源码和spec文件，就形成了rpm包。



(2) multipkg 的目录结构。

对于需要编译类的工程，一般就是 index.yaml,scripts/*.sh 和source目录（或者源码包 xxx.tar.gz），例如repobuilder这个工程的目录结构如下：

tree repobuilder/
repobuilder/
├── index.yaml
├── scripts
│   ├── build
│   ├── preun.sh
│   └── run
└── source
    ├── cmthread.c
    ├── colordefine.h
    ├── configserver.c
    ├── configserver.h
    ├── daemon.c
    ├── datadef.h
    ├── inihelper.c
    ├── inihelper.h
    ├── loghelper.c
    ├── main.c
    ├── Makefile
    ├── nethelper.c
    ├── nethelper.h
    ├── os_independent.h
    ├── repo.conf
    └── tags

其中index.yaml的内容如下：

---
default:
  name: repobuilder
  requires:
    - createrepo >= 0.4.11
  summary: muti-thread tasks to update repo of yum server
  version: '1.1.0'
  release: '1'
  group: 'cmesoft'
  packager: 'duanjigang'
  license: 'cmesoft'
  #the multipkg do not support config file for rpm-->need update
  keepopt: 
      - %config(noreplace) /etc/repo.conf
      - %defattr(-,root,root) 
      - %attr(0777 nobody nobody) /etc/repo.conf

scripts/build 的内容如下：

#!/bin/sh
make clean || exit 1
make || exit 1
mkdir -p $DESTDIR/etc/service/repobuilder
mkdir -p $DESTDIR/usr/bin/
install repobuilder $DESTDIR/usr/bin/
install repo.conf $DESTDIR/etc/

又比如wget 工程的目录结构如下：

tree wget/
wget/
├── index.yaml
├── root
│   └── etc
│       └── wget.conf
├── scripts
│   ├── build
│   ├── post.sh
│   └── preun.sh
└── wget-1.14.tar.gz

其中build的内容就是spec中build段的内容，如下：

#!/bin/sh
exec 2>&1 >/tmp/build.log
./configure --prefix=/usr/local/wget --with-ssl=openssl
make
make install



对于不需要编译类的工程，就更简单了，只需要在root目录中放置你的文件即可，比如 pkg-release 这个包就是如此：

tree pkg-release

输出如下：
pkg-release
├── index.yaml
└── root
    ├── bin
    │   └── pkgrelease
    └── etc
        └── pkgrelease.conf

运行命令：

multipkg pkg-release 

后，生成文件 

pkgrelease-1.1.0-1.noarch.rpm

通过命令：

rpm -qpl pkgrelease-1.1.0-1.noarch.rpm

查看该rpm文件包含的文件列表为：

/bin/pkgrelease
/etc/pkgrelease.conf

从上面的结构你应该已经看到了， 在源码目录中，root目录就类似于安装机器的 “/” 目录，这样，在root下怎么存放文件，你的rpm将来就怎样安装到目标机器上去。



(3) 使用举例。

还是举两个例子，一个是源码编译工程，一个是不需要编译的脚本构成的工程。

1） 源码编译工程，以lsmd中的repobuilder为例：

repobuilder 工程的目录树如下：

├── index.yaml
├── scripts
│   ├── build
│   ├── preun.sh
│   └── run
└── source
    ├── cmthread.c
    ├── colordefine.h
    ├── configserver.c
    ├── configserver.h
    ├── daemon.c
    ├── datadef.h
    ├── inihelper.c
    ├── inihelper.h
    ├── loghelper.c
    ├── main.c
    ├── Makefile
    ├── nethelper.c
    ├── nethelper.h
    ├── os_independent.h
    ├── repo.conf
    └── tags

其中source 下的文件就不再重点介绍，是一个标准的C工程，着重看下index.yaml和scripts中内容：

index.yaml:

---
default:
  name: repobuilder
  requires:
    - createrepo >= 0.4.11
  summary: muti-thread tasks to update repo of yum server
  version: '1.1.0'
  release: '1'
  group: 'cmesoft'
  packager: 'duanjigang'
  license: 'cmesoft'
  #the multipkg do not support config file for rpm-->need update
  keepopt: 
      - %config(noreplace) /etc/repo.conf
      - %defattr(-,root,root) 
      - %attr(0777 nobody nobody) /etc/repo.conf

能看到基本的信息，name,version,release,requires等，requires可以写多行，标示依赖多个包，

需要注意的是keepopt目前在multipkg中还不支持，这几天我会参考以前的代码，尝试把这个功能加进来。

然后看下scripts中的文件：

build:

#!/bin/sh
make clean || exit 1
make || exit 1
mkdir -p $DESTDIR/etc/service/repobuilder
mkdir -p $DESTDIR/usr/bin/
install repobuilder $DESTDIR/usr/bin/
install repo.conf $DESTDIR/etc/

很简单，就是编译，安装。和spec文件中内容一样。

preun:

#!/bin/bash
if [ "$1" = "0" ]; then
        rm /service/repobuilder || exit 1
        /usr/local/bin/svc -dx /etc/service/repobuilder /etc/service/repobuilder/log || exit 1
fi

注意 “$1 = 0”这个判断，在书中，已经说过，preun的第一个参数为0标示是卸载，否则是升级。

删除安装的服务目录。

run:

multipkg中scripts/run这个脚本比较特殊，是服务启动脚本，也就是自启动脚本，所以，只需要把你

的脚本main函数，或者运行主体脚本保存为scripts/run即可，比如repobuilder的例子，或者，你也可以写出如下的scripts/run:

#!/bin/bash

while true

do

    sleep 5

  date

done

都是可以的。当rpm安装后，这个run的安装路径是：/etc/service/repobuilder/run

也就是说，scripts/run脚本，会为每个想要自启动的脚本添加一个服务目录，路径为：/etc/service/xxx

这个动作，和“服务”这个说法比较一致，既然是“自启动”，那么就认为其为一个“服务(service)”,所以把

运行脚本存储在“/etc/service”下，这种设计比较人性化，容易理解。



2） 脚本/不需编译类工程的例子：

这种工程比较简单，只需要理解 root目录的作用就OK了，看下pkgaudit这个工程的目录结构和文件列表，你应该就明白

你的root目录应该怎么存储了：

目录结构：

tree pkgaudit/root/
pkgaudit/root/
├── etc
│   └── pkgaudit.conf
└── usr
    └── local
        └── pkgaudit
            ├── data
            │   └── readme.txt
            └── log
                └── readme

文件列表：

rpm -qpl pkgaudit/pkgaudit-1.0.0-3.noarch.rpm 
/etc/pkgaudit.conf
/etc/service/pkgaudit/log/run
/etc/service/pkgaudit/run
/usr/local/pkgaudit/data/readme.txt
/usr/local/pkgaudit/log/readme

3）两种情况都包括（源码编译+脚本类）

这类情况下，目录结构也比较简单，你可以认为是在源码编译工程下面添加一个root目录即可，不过这时，

你的rpm中包含的文件列表由两部分组成：build安装的文件和root中包含的文件。读者可以自己测试这种情况，并且查看

最终生成的rpm包含的文件列表信息。










